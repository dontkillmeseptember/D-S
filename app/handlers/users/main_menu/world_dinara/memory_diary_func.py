from data.loader import dp
from data.config import ConfigBot
from data.config_Keyboard import ConfigReplyKeyboard
from data.loader_keyboard import LoaderInlineKeyboardsMemoryDiary

from database.requests.user_db import load_user_data, is_user_in_data
from database.requests.version_db import get_bot_version

from misc.libraries import types, FSMContext
from misc.loggers import logger

@dp.message_handler(lambda message: message.text == f"{ConfigReplyKeyboard().MEMORYDIARY}")
async def Memory_Diary_Handler(Message: types.Message, state: FSMContext) -> None:
	USER_DATA_DB = load_user_data()
	VERSION_BOT = get_bot_version()

	try:
		USER_ID = ConfigBot.USERID(Message)
		USER_NAME = ConfigBot.USERNAME(Message)
		USER_LAST_NAME = ConfigBot.USERLASTNAME(Message)

		START_MESSAGE = f"<a href='https://t.me/{USER_NAME}'>{USER_LAST_NAME}</a>"

		if is_user_in_data(USER_ID, USER_DATA_DB):
			USER_VERSION_BOT = ConfigBot.USERVERSIONBOT(Message)

			if USER_VERSION_BOT == VERSION_BOT:
				USER_YEAR = ConfigBot.GET_USER_DAY_YEAR_MONTH('year')
				USER_MONTH = ConfigBot.GET_USER_DAY_YEAR_MONTH('month')

				memory_days_inline_keyboard = LoaderInlineKeyboardsMemoryDiary(year = USER_YEAR, month = USER_MONTH).INLINE_KEYBOARDS_MEMORY_DAYS

				await Message.answer(f"üí¨ {START_MESSAGE}, –≤—Å—è –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:", reply_markup = memory_days_inline_keyboard)

				await state.set_data({"year": USER_YEAR, "month": USER_MONTH})

			elif not USER_VERSION_BOT == VERSION_BOT:
				await Message.answer(f"üí¨ {START_MESSAGE}! –†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤—ã—à–ª–∞ <b>–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</b> –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.\n\n" 
										"‚ùï –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b><code>/update</code></b>.\n\n" 
										"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! ü§ç")
										
		elif not is_user_in_data(USER_ID, USER_DATA_DB):
			logger.warning(f"‚ö†Ô∏è –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [@{USER_NAME}] –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –î–Ω–µ–≤–Ω–∏–∫ –ü–∞–º—è—Ç–∏.")

		else:
			logger.error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
	except Exception as e:
		logger.error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)

async def GENERATE_SELECTED_CALENDAR_MARKUP(year: int, month: int) -> None:
	try:
		memory_days_inline_keyboard = LoaderInlineKeyboardsMemoryDiary(year = year, month = month).INLINE_KEYBOARDS_MEMORY_DAYS

		return memory_days_inline_keyboard
	except Exception as e:
		logger.error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)

@dp.callback_query_handler(lambda callback_data: callback_data.data.startswith("MONTH_"))
async def Memory_Diary_Month_Handler(CallbackQuery: types.CallbackQuery, state: FSMContext) -> None:
	USER_DATA_DB = load_user_data()

	try:
		USER_ID = ConfigBot.USERID(CallbackQuery)
		USER_NAME = ConfigBot.USERNAME(CallbackQuery)
		USER_LAST_NAME = ConfigBot.USERLASTNAME(CallbackQuery)

		START_MESSAGE = f"<a href='https://t.me/{USER_NAME}'>{USER_LAST_NAME}</a>"

		if is_user_in_data(USER_ID, USER_DATA_DB):
			STATE_GET_DATA = await state.get_data()

			CURRENT_YEAR = STATE_GET_DATA.get("year", 2024)
			CURRENT_MONTH = STATE_GET_DATA.get("month", 1)
			
			CALLBACK_DATA = CallbackQuery.data.split("_")[1]

			if CALLBACK_DATA == "NEXT":
				CURRENT_MONTH += 1

				if CURRENT_MONTH > 12:
					CURRENT_MONTH = 1
					CURRENT_YEAR += 1

			elif CALLBACK_DATA == "BACK":
				CURRENT_MONTH -= 1

				if CURRENT_MONTH < 1:
					CURRENT_MONTH = 12
					CURRENT_YEAR -= 1

			if CURRENT_YEAR > 2024:
				CURRENT_YEAR = 2024
			
			elif CURRENT_YEAR < 2022:
				CURRENT_YEAR = 2022

			memory_days_inline_keyboard = await GENERATE_SELECTED_CALENDAR_MARKUP(year = CURRENT_YEAR, month = CURRENT_MONTH)

			await CallbackQuery.message.edit_text(f"üí¨ {START_MESSAGE}, –≤—Å—è –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:", reply_markup = memory_days_inline_keyboard)

			await state.update_data(year = CURRENT_YEAR, month = CURRENT_MONTH)

		elif not is_user_in_data(USER_ID, USER_DATA_DB):
			logger.warning(f"‚ö†Ô∏è –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [@{USER_NAME}] –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –î–Ω–µ–≤–Ω–∏–∫ –ü–∞–º—è—Ç–∏.")

		else:
			logger.error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
	except Exception as e:
		logger.error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)